import telebot
from telebot import types
import json

from excel import *
import config
import utils


token = config.BOT_TOKEN

bot = telebot.TeleBot(token)
#bot = telebot.TeleBot("7388219026:AAF3JMtLl2hU55FwSKfEFxVF3CLJpMarmV8")

# —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
f = open("messages.txt", encoding="utf-8").read().split("SPLITTER")
BLOOD_REQUIREMENTS = f[0]
BLOOD_PREPARATION = f[1]
BLOOD_FOOD = f[2]
BLOOD_ABSOLUTE_CONTRS = f[3]
BLOOD_TEMPORARY_CONTRS = f[4]
BACK_IMPORTANCE = f[5]
BACK_PROCEDURE = f[6]
MIFI_INFO = f[7]

questions = []  # –≤–æ–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω–∞–º —Ç–∏–ø–∞ {chat_id: id, question: question, express: false}, express - —Å—Ä–æ—á–Ω—ã–π –ª–∏ –≤–æ–ø—Ä–æ—Å


@bot.message_handler(['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –±–æ—Ç, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:")
    bot.send_document(message.chat.id, open("privacy_policy.pdf", "rb"))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚úå")

@bot.message_handler(content_types=['text'])
def get_number(message):
    if message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
        data = getUserByNumber(chat_id=message.chat.id)
        ikb = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="full_donation_history")
        ikb.add(button)
        print(data)
        if data[0] and data[1] and data[8]:
            kd = data[4] if data[4] else "–î–æ–Ω–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ"
            kg = data[5] if data[5] else "–î–æ–Ω–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ"
            kf = data[6] if data[6] else "–î–æ–Ω–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ"
            bot.send_message(message.chat.id, f"–§–ò–û: {data[0]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π: {kd}\n"
                                              f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏ –ì–∞–≤—Ä–∏–ª–æ–≤–∞: {kg}\n"
                                              f"–¶–ö –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏: –Ø –≤–∞—â–µ —Ö–∑\n"  # TODO: –≥–¥–µ —Ç–æ –≤–∑—è—Ç—å —ç—Ç—É –¥–æ–Ω–∞—Ü–∏—é
                                              f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏ –§–ú–ë–ê: {kf}\n"  
                                              f"–†–µ–≥–∏—Å—Ç—Ä –î–ö–ú: –ê –≥–¥–µ —ç—Ç–æ –±—Ä–∞—Ç—å..")
        else:
            bot.send_message(message.chat.id, f"–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!\n\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":  # TODO: —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏
        ikb = types.InlineKeyboardMarkup(row_width=1)
        buttonBlood = types.InlineKeyboardButton("–î–æ–Ω–æ—Ä—Å—Ç–≤–æ –∫—Ä–æ–≤–∏", callback_data="blood_info")
        buttonBack = types.InlineKeyboardButton("–î–æ–Ω–æ—Ä—Å—Ç–≤–æ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞", callback_data="back_info")
        buttonMIFI = types.InlineKeyboardButton("–î–æ–Ω–æ—Ä—Å—Ç–≤–æ –≤ –ú–ò–§–ò", callback_data="mifi_info")
        ikb.add(buttonBlood, buttonBack, buttonMIFI)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:", reply_markup=ikb)
    elif message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        def askExpress(message):
            ikb = types.InlineKeyboardMarkup(row_width=2)
            buttonYes = types.InlineKeyboardButton("–î–∞", callback_data=f"express_question_yes-{message.text}")  #TODO: –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏....
            buttonNo = types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"express_question_no-{message.text}")
            ikb.add(buttonYes, buttonNo)

            bot.send_message(message.chat.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π?", reply_markup=ikb)

        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:")
        bot.register_next_step_handler(message, askExpress)
    else:  #  TODO: –µ—Å–ª–∏ —á–∞—Ç –∞–π–¥–∏ –µ—Å—Ç—å –≤ –±–¥ —Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∏–Ω–∞—á–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        number = utils.phone_validation(message.text)
        print(number)
        if number == "error":
            bot.send_message(message.chat.id, f"–ü–æ—Ö–æ–∂–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ü§®\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        else:
            data = getUserByNumber(number=number, chat_id=message.chat.id)
            if data:
                ikb = types.InlineKeyboardMarkup(row_width=2)
                buttonY = types.InlineKeyboardButton("–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æü§†", callback_data="login_good")
                buttonN = types.InlineKeyboardButton("–ï—Å—Ç—å –æ—à–∏–±–∫–∞ü•≤", callback_data=f"login_error={str(data[-1])}")
                ikb.add(buttonY, buttonN)

                bot.send_message(message.chat.id, f"–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:\n\n–§–ò–û: {data[0]}", reply_markup=ikb)
            else:
                user = ["", "", "", "", "", "", "", "", message.text, str(message.chat.id)]

                def askFIO(message):

                    try:
                        r = createRow()
                        addPartRow(r, "FIO", message.text)
                        addPartRow(r, "phone", utils.phone_validation(user[8]))
                        addPartRow(r, "chat_id", user[9])

                        ikb = types.InlineKeyboardMarkup(row_width=2)
                        # print(f"r_st-{'='.join(message.text.split())}-{user[8]}")
                        # print(len(f"r_st-{'='.join(message.text.split())}-{user[8]}".encode(
                        #     "utf-8")))  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <= 64
                        buttonStudent = types.InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç",
                                                                   callback_data=f"r_st-{r}")  # st = student, –ª–∏–º–∏—Ç –≤ 64 –±–∞–π—Ç–∞ –ø–∞–º—è—Ç–∏
                        buttonStaff = types.InlineKeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ú–ò–§–ò",
                                                                 callback_data=f"r_s-{r}")
                        buttonOut = types.InlineKeyboardButton("–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä",
                                                               callback_data=f"r_o-{r}")
                        ikb.add(buttonStudent, buttonStaff, buttonOut)

                        bot.send_message(message.chat.id, "–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å?", reply_markup=ikb)
                    except Exception as e:
                        print(e)
                        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ(")


                bot.send_message(message.chat.id, f"–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –§–ò–û:")
                bot.register_next_step_handler(message, askFIO)


@bot.callback_query_handler(func=lambda call: call.data == 'login_good')
def login_data_okey(call):
    chat_id = call.message.chat.id
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btn1 = types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    btn2 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    btn3 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
    btn4 = types.KeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(chat_id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=markup)  # TODO: —Ç—É—Ç –Ω–∞–¥–æ –Ω–æ—Ä–º —Å–æ–æ–±—â–µ–Ω–∏–µ


@bot.callback_query_handler(func=lambda call: 'login_error' in call.data)
def login_data_error(call):
    chat_id = call.message.chat.id
    deleteRow(int(call.data.split("=")[1]))
    bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑)\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@bot.callback_query_handler(func=lambda call: call.data == 'registration_good')
def register(call):
    chat_id = call.message.chat.id
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btn1 = types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    btn2 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    btn3 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
    btn4 = types.KeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: "registration_error" in call.data)
def registration_student_error(call):
    chat_id = call.message.chat.id
    try:
        deleteRow(int(call.data.split("=")[1]))
    except Exception as e:
        print(e)
    bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑)\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@bot.callback_query_handler(func=lambda call: "r_st" in call.data)
def registration_student(call):
    chat_id = call.message.chat.id
    r = call.data.split("-")[1]


    def askForStudentGroup(message):
        try:
            addPartRow(int(r), "group", message.text)

            user = getRow(r)
            ikb = types.InlineKeyboardMarkup(row_width=2)
            buttonY = types.InlineKeyboardButton("–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æü§†", callback_data="registration_good")
            buttonN = types.InlineKeyboardButton("–ï—Å—Ç—å –æ—à–∏–±–∫–∞ü•≤", callback_data=f"registration_error={r}")
            ikb.add(buttonY, buttonN)
            bot.send_message(chat_id, f"–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:\n\n"
                                      f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user[8]}\n"
                                      f"–§–ò–û: {user[0]}\n"
                                      f"–ì—Ä—É–ø–ø–∞: {user[1]}", reply_markup=ikb)
        except Exception as e:
            print(f"adding data to DB error: {e}")
            bot.send_message(chat_id, f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")



    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã:")
    bot.register_next_step_handler(call.message, askForStudentGroup)


@bot.callback_query_handler(func=lambda call: "r_s" in call.data)
def registration_staff(call):
    chat_id = call.message.chat.id
    r = call.data.split("-")[1]

    try:
        addPartRow(int(r), "group", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫")

        user = getRow(r)
        ikb = types.InlineKeyboardMarkup(row_width=2)
        buttonY = types.InlineKeyboardButton("–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æü§†", callback_data="registration_good")
        buttonN = types.InlineKeyboardButton("–ï—Å—Ç—å –æ—à–∏–±–∫–∞ü•≤", callback_data=f"registration_error={r}")
        ikb.add(buttonY, buttonN)
        bot.send_message(chat_id, f"–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:\n\n"
                                  f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user[8]}\n"
                                  f"–§–ò–û: {user[0]}\n"
                                  f"–ì—Ä—É–ø–ø–∞: {user[1]}", reply_markup=ikb)
    except Exception as e:
        print(f"adding data to DB error: {e}")
        bot.send_message(chat_id, f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@bot.callback_query_handler(func=lambda call: "r_o" in call.data)
def registration_out(call):
    chat_id = call.message.chat.id
    r = call.data.split("-")[1]

    try:
        addPartRow(int(r), "group", "–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä")

        user = getRow(r)
        ikb = types.InlineKeyboardMarkup(row_width=2)
        buttonY = types.InlineKeyboardButton("–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æü§†", callback_data="registration_good")
        buttonN = types.InlineKeyboardButton("–ï—Å—Ç—å –æ—à–∏–±–∫–∞ü•≤", callback_data=f"registration_error={r}")
        ikb.add(buttonY, buttonN)
        bot.send_message(chat_id, f"–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:\n\n"
                                  f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user[8]}\n"
                                  f"–§–ò–û: {user[0]}\n"
                                  f"–ì—Ä—É–ø–ø–∞: {user[1]}", reply_markup=ikb)
    except Exception as e:
        print(f"adding data to DB error: {e}")
        bot.send_message(chat_id, f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@bot.callback_query_handler(func=lambda call: call.data == 'full_donation_history')
def full_donations(call):
    chat_id = call.message.chat.id
    # TODO: –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å–¥–∞—á–∏ (–∫–æ–≥–¥–∞ –æ–Ω–∏ –≤ —ç–∫—Å–µ–ª–µ –±—É–¥—É—Ç)))


@bot.callback_query_handler(func=lambda call: call.data == 'blood_info')
def blood_info(call):
    chat_id = call.message.chat.id
    ikb = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–Ω–æ—Ä–∞–º", callback_data="blood_donation_requirements")
    button2 = types.InlineKeyboardButton("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–æ–Ω–∞—Ü–∏–∏", callback_data="blood_donation_preparation")
    button3 = types.InlineKeyboardButton("–†–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è", callback_data="blood_food_preparation")
    button4 = types.InlineKeyboardButton("–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è", callback_data="blood_absolute_contrs")
    button5 = types.InlineKeyboardButton("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è", callback_data="blood_temporary_contrs")
    ikb.add(button1, button2, button3, button4, button5)

    bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=ikb)


@bot.callback_query_handler(func=lambda call: call.data == 'blood_donation_requirements')
def blood_donation_req(call):
    chat_id = call.message.chat.id
    ikb = types.InlineKeyboardMarkup(row_width=1)
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="blood_info")
    ikb.add(button_back)
    bot.send_message(chat_id, BLOOD_REQUIREMENTS, reply_markup=ikb)


@bot.callback_query_handler(func=lambda call: call.data == 'blood_donation_preparation')
def blood_donation_req(call):
    chat_id = call.message.chat.id
    ikb = types.InlineKeyboardMarkup(row_width=1)
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="blood_info")
    ikb.add(button_back)
    bot.send_message(chat_id, BLOOD_PREPARATION, reply_markup=ikb)


@bot.callback_query_handler(func=lambda call: call.data == 'blood_food_preparation')
def blood_donation_req(call):
    chat_id = call.message.chat.id
    ikb = types.InlineKeyboardMarkup(row_width=1)
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="blood_info")
    ikb.add(button_back)
    bot.send_message(chat_id, BLOOD_FOOD, reply_markup=ikb)


@bot.callback_query_handler(func=lambda call: call.data == 'blood_absolute_contrs')
def blood_donation_req(call):
    chat_id = call.message.chat.id
    ikb = types.InlineKeyboardMarkup(row_width=1)
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="blood_info")
    ikb.add(button_back)
    bot.send_message(chat_id, BLOOD_ABSOLUTE_CONTRS, reply_markup=ikb)


@bot.callback_query_handler(func=lambda call: call.data == 'blood_temporary_contrs')
def blood_donation_req(call):
    chat_id = call.message.chat.id
    ikb = types.InlineKeyboardMarkup(row_width=1)
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="blood_info")
    ikb.add(button_back)
    bot.send_message(chat_id, BLOOD_TEMPORARY_CONTRS, reply_markup=ikb)


@bot.callback_query_handler(func=lambda call: call.data == 'back_info')
def back_info(call):
    chat_id = call.message.chat.id
    ikb = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton("–í–∞–∂–Ω–æ—Å—Ç—å", callback_data="back_importance")
    button2 = types.InlineKeyboardButton("–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ–Ω–∞—Ü–∏–∏", callback_data="back_procedure")
    ikb.add(button1, button2)

    bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=ikb)


@bot.callback_query_handler(func=lambda call: call.data == 'back_importance')
def blood_donation_req(call):
    chat_id = call.message.chat.id
    ikb = types.InlineKeyboardMarkup(row_width=1)
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_info")
    ikb.add(button_back)
    bot.send_message(chat_id, BACK_IMPORTANCE, reply_markup=ikb)


@bot.callback_query_handler(func=lambda call: call.data == 'back_procedure')
def blood_donation_req(call):
    chat_id = call.message.chat.id
    ikb = types.InlineKeyboardMarkup(row_width=1)
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_info")
    ikb.add(button_back)
    bot.send_message(chat_id, BACK_PROCEDURE, reply_markup=ikb)


@bot.callback_query_handler(func=lambda call: call.data == 'mifi_info')  # TODO: –¥–∞—Ç–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –î–î
def mifi_info(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, MIFI_INFO)  # TODO: –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)


@bot.callback_query_handler(func=lambda call: "express_question_yes" in call.data)
def express_question(call):
    chat_id = call.message.chat.id
    try:
        data = {"chat_id": chat_id, "question": call.data.split("-")[1], "express": True}

        with open(config.QUESTION_PATH, 'r') as file:
            rdata = json.load(file)

        rdata.append(data)

        with open(config.QUESTION_PATH, "w") as file:
            json.dump(rdata, file, indent=4)  # TODO: —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å :))))))))))

        bot.send_message(chat_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å—Ä–æ—á–Ω—ã–π.\n"
                                  "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
    except Exception as e:
        print(f"Question adding error occured: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.callback_query_handler(func=lambda call: "express_question_no" in call.data)
def express_question(call):
    chat_id = call.message.chat.id
    try:
        data = {"chat_id": chat_id, "question": call.data.split("-")[1], "express": False}

        with open(config.QUESTION_PATH, 'r') as file:
            rdata = json.load(file)

        rdata.append(data)

        with open(config.QUESTION_PATH, "w") as file:
            json.dump(rdata, file, indent=4)

        bot.send_message(chat_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                                  "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
    except Exception as e:
        print(f"Question adding error occured: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


bot.polling(none_stop=True, interval=0)

